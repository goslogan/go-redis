// -------------------------------------------

// Info represents the results of the FT.INFO command
type FTInfo struct {
	IndexName                  string             `mapstructure:"index_name"`
	Index                      IndexOptions       `mapstructure:"-"`
	NumDocs                    int64              `mapstructure:"num_docs"`
	MaxDocId                   int64              `mapstructure:"max_doc_id"`
	MaxTerms                   int64              `mapstructure:"max_terms"`
	NumRecords                 int64              `mapstructure:"num_records"`
	Indexing                   float64            `mapstructure:"indexing"`
	PercentIndexed             float64            `mapstructure:"percent_indexed"`
	HashIndexingFailures       int64              `mapstructure:"hash_indexing_failures"`
	TotalInvertedIndexBlocks   int64              `mapstructure:"total_inverted_index_blocks"`
	InvertSize                 float64            `mapstructure:"invert_sz_mb"`
	VectorIndexSize            float64            `mapstructure:"vector_index_sz_mb"`
	DocTableSize               float64            `mapstructure:"doc_table_size_mb"`
	OffsetVectorsSize          float64            `mapstructure:"offset_vectors_sz_mb"`
	SortableValuesSize         float64            `mapstructure:"sortable_values_size_mb"`
	KeyTableSize               float64            `mapstructure:"key_table_size_mb"`
	AverageRecordsPerDoc       float64            `mapstructure:"records_per_doc_avg"`
	AverageBytesPerRecord      float64            `mapstructure:"bytes_per_record_avg"`
	AverageOffsetsPerTerm      float64            `mapstructure:"offsets_per_term_avg"`
	AverageOffsetBitsPerRecord float64            `mapstructure:"offset_bits_per_record_avg"`
	TotalIndexingTime          time.Duration      `mapstructure:"total_indexing_time"`
	NumberOfUses               int64              `mapstructure:"number_of_uses"`
	GCStats                    FTInfoGCStats      `mapstructure:"gc_stats"`
	InfoCursorStats            FTInfoCursorStats  `mapstructure:"cursor_stats"`
	DialectStats               FTInfoDialectStats `mapstructure:"dialect_stats"`
}

// FTInfoGCStats represents the gc-stats component of FT.INFO
type FTInfoGCStats struct {
	BytesCollected       int64         `mapstructure:"bytes_collected"`
	TotalMsRun           time.Duration `mapstructure:"total_ms_run"`
	TotalCycles          int64         `mapstructure:"total_cycle"`
	AverageCycleTime     time.Duration `mapstructure:"average_cycle_time"`
	LastRunTime          time.Duration `mapstructure:"last_run_time"`
	GCNumericTreesMissed int64         `mapstructure:"gc_numeric_trees_missed"`
	GCBlocksDenied       int64         `mapstructure:"gc_blocks_denied"`
}

// FTInfoDialectStats represents the dialect-stats component of FT.INFO
type FTInfoDialectStats struct {
	Dialect1 int64 `mapstructure:"dialect_1"`
	Dialect2 int64 `mapstructure:"dialect_2"`
	Dialect3 int64 `mapstructure:"dialect_3"`
}

// FTInfoDialectStats represents the cursor-stats component of FT.INFO
type FTInfoCursorStats struct {
	GlobalIdle    int64 `mapstructure:"global_idle"`
	GlobalTotal   int64 `mapstructure:"global_total"`
	IndexCapacity int64 `mapstructure:"index_capacity"`
	IndexTotal    int64 //index_total
}

type InfoCmd struct {
	baseCmd
	val *FTInfo
}

func NewInfoCmd(ctx context.Context, args ...interface{}) *InfoCmd {
	return &InfoCmd{
		baseCmd: baseCmd{
			ctx:  ctx,
			args: args,
		},
	}
}

func (c *InfoCmd) SetVal(i *FTInfo) {
	c.val = i
}

func (c *InfoCmd) Val() *FTInfo {
	return c.val
}

func (c *InfoCmd) Result() (*FTInfo, error) {
	return c.Val(), c.Err()
}

func (c *InfoCmd) readReply(rd *proto.Reader) error {

}

func (c *InfoCmd) postProcess() error {
	info := FTInfo{}
	config := mapstructure.DecoderConfig{
		DecodeHook:           mapstructure.ComposeDecodeHookFunc(internal.StringToDurationHookFunc(), internal.StringToMapHookFunc()),
		WeaklyTypedInput:     true,
		Result:               &info,
		IgnoreUntaggedFields: true,
	}
	if decoder, err := mapstructure.NewDecoder(&config); err != nil {
		return err
	} else if err := decoder.Decode(c.MapStringInterfaceCmd.Val()); err != nil {
		return err
	}

	info.Index = *NewIndexOptions()
	info.Index.parseInfo(c.MapStringInterfaceCmd.Val())

	c.SetVal(&info)
	return nil
}

// FTInfo returns information about an index
func (c cmdable) FTInfo(ctx context.Context, index string) *InfoCmd {
	args := []interface{}{"ft.info", index}
	cmd := NewInfoCmd(ctx, args...)
	_ = c(ctx, cmd)
	return cmd
}
